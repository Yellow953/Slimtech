%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2377 768
%%HiResBoundingBox: 0 0 2376.96 768
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2376.96 768 re
W
q
[0.24 0 0 -0.24 0 768] cm
q
0 0 9904.167 3197.2114 re
W*
q
[3.124914 0 0 3.124616 0.0559831 0] cm
/DeviceRGB {} CS
[0.0235 0.0235 0.0235] SC
/DeviceRGB {} cs
[0.0235 0.0235 0.0235] sc
0 0 3169.3853 1024.23364 re
f
Q
q
[26.882225 0 0 26.879662 449.55649 99.189095] cm
q
37.248001 80 m
36.736 80 36.224003 79.804001 35.832001 79.416 c
35.052002 78.643997 35.052002 77.368004 35.832001 76.587997 c
65.464005 46.955997 l
66.244003 46.183998 67.512001 46.183998 68.292007 46.955997 c
69.072006 47.735996 69.072006 49.011997 68.292007 49.783997 c
38.660007 79.416 l
38.268009 79.804001 37.756008 80 37.248009 80 c
37.248001 80 l
h
W
[33.630007 0 0 33.623 35.247006 46.376992] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0.005799 def
/yMin -0.00574 def
/xMax 1.005798 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 1 mul 0 add
1 index 1 exp -0.867 mul 0.867 add
2 index 1 exp -0.169 mul 1 add
4 3 roll pop 
}
def
-0.005799 1.005798 0 axialSH
Q
q
93 64 m
67 64 l
65.896004 64 65 63.099998 65 62 c
65 60.900002 65.896004 60 67 60 c
88 60 l
69.492004 42.363998 l
68.696007 41.604 68.664001 40.331997 69.424004 39.535999 c
70.184006 38.736 71.452003 38.708 72.252007 39.459999 c
94.372009 60.543999 l
94.964012 61.119999 95.152008 61.967999 94.848007 62.736 c
94.55201 63.504002 93.820007 64 93.000008 64 c
93 64 l
h
W
[29.991593 0 0 25.084652 64.999998 38.915342] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin 0 def
/yMin -0.008266 def
/xMax 1.005349 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 1 mul 0 add
1 index 1 exp -0.867 mul 0.867 add
2 index 1 exp -0.169 mul 1 add
4 3 roll pop 
}
def
0 1.005349 0 axialSH
Q
q
51.335999 37.452 m
50.695999 37.452 50.067997 37.147999 49.675999 36.568001 c
49.056 35.652 49.292 34.412003 50.208 33.796001 c
65.751999 23.248001 l
66.543999 22.716002 67.608002 22.820002 68.288002 23.500002 c
71.912003 27.116001 l
72.692001 27.888 72.692001 29.172001 71.912003 29.944 c
71.132004 30.716 69.864006 30.716 69.084 29.944 c
66.631996 27.492001 l
52.459995 37.104 l
52.107994 37.344002 51.723995 37.452 51.335995 37.452 c
51.335999 37.452 l
h
W
[23.166664 0 0 14.542277 49.330338 22.909718] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0.011842 def
/yMin -0.013321 def
/xMax 1.008417 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 1 mul 0 add
1 index 1 exp -0.867 mul 0.867 add
2 index 1 exp -0.169 mul 1 add
4 3 roll pop 
}
def
-0.011842 1.008417 0 axialSH
Q
q
93 44 m
83.959999 44 l
83.416 44 82.900002 43.779999 82.524002 43.400002 c
73.695999 34.316002 l
72.928001 33.524002 72.944 32.248001 73.736 31.488003 c
74.524002 30.720003 75.792 30.736002 76.564003 31.528004 c
84.808006 40.004005 l
93.004005 40.004005 l
94.108002 40.004005 95.004005 40.908005 95.004005 42.004005 c
95.004005 43.100006 94.100006 44.000004 93.000008 44.000004 c
93 44 l
h
W
[21.873192 0 0 13.07719 73.130817 30.922812] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0.009272 def
/yMin -0.015509 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 1 mul 0 add
1 index 1 exp -0.867 mul 0.867 add
2 index 1 exp -0.169 mul 1 add
4 3 roll pop 
}
def
-0.009272 1 0 axialSH
Q
q
81.024002 28 m
77.716003 28 75.024002 25.308001 75.024002 22 c
75.024002 18.691999 77.716003 16 81.024002 16 c
84.328003 16 87.024002 18.691999 87.024002 22 c
87.024002 25.308001 84.328003 28 81.024002 28 c
h
81.024002 20 m
79.920006 20 79.024002 20.9 79.024002 22 c
79.024002 23.1 79.920006 24 81.024002 24 c
82.127998 24 83.024002 23.1 83.024002 22 c
83.024002 20.9 82.124001 20 81.024002 20 c
h
W
[12 0 0 12 75.024007 15.999995] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin 0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 1 mul 0 add
1 index 1 exp -0.867 mul 0.867 add
2 index 1 exp -0.169 mul 1 add
4 3 roll pop 
}
def
-0 1 0 axialSH
Q
q
27 68 m
3 68 l
1.896 68 1 67.099998 1 66 c
1 64.900002 1.896 64 3 64 c
27 64 l
28.104 64 29 64.900002 29 66 c
29 67.099998 28.1 68 27 68 c
h
W
[28.000002 0 0 4 1.000001 63.999995] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin 0.000001 def
/xMax 1 def
/yMax 1.000001 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 1 mul 0 add
1 index 1 exp -0.867 mul 0.867 add
2 index 1 exp -0.169 mul 1 add
4 3 roll pop 
}
def
-0 1 0 axialSH
Q
q
35 56 m
3 56 l
1.896 56 1 55.099998 1 54 c
1 52.900002 1.896 52 3 52 c
35 52 l
36.104 52 37 52.900002 37 54 c
37 55.099998 36.099998 56 35 56 c
h
W
[36.000001 0 0 4 1.000001 51.999995] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin 0.000001 def
/xMax 1 def
/yMax 1.000001 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 1 mul 0 add
1 index 1 exp -0.867 mul 0.867 add
2 index 1 exp -0.169 mul 1 add
4 3 roll pop 
}
def
-0 1 0 axialSH
Q
q
43 44 m
3 44 l
1.896 44 1 43.099998 1 42 c
1 40.900002 1.896 40 3 40 c
43 40 l
44.104 40 45 40.900002 45 42 c
45 43.099998 44.099998 44 43 44 c
h
W
[44.000004 0 0 4 1.000001 39.999996] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin 0.000001 def
/xMax 1 def
/yMax 1.000001 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 1 mul 0 add
1 index 1 exp -0.867 mul 0.867 add
2 index 1 exp -0.169 mul 1 add
4 3 roll pop 
}
def
-0 1 0 axialSH
Q
Q
q
[20.119719 0 0 20.117802 1914.2549 2526.5088] cm
q
4.38 14.020001 m
4.38 17.82 l
13.58 17.82 l
13.58 20 l
2.2 20 l
2.2 5.08 l
12.7 5.08 l
12.7 7.28 l
4.38 7.28 l
4.38 11.799999 l
4.793334 11.56 5.253334 11.4 5.76 11.32 c
6.133334 11.253333 6.613334 11.219999 7.2 11.219999 c
10.46 11.219999 l
10.46 13.44 l
7.2 13.44 l
6.653333 13.44 6.173333 13.473333 5.76 13.54 c
5.253333 13.633333 4.793333 13.793334 4.38 14.020001 c
4.38 14.020001 l
h
41.652 9.74 m
36.552002 15.84 l
31.492002 9.74 l
31.492002 20 l
29.352003 20 l
29.352003 7.18 l
27.612003 5.08 l
30.432003 5.08 l
36.532001 12.400001 l
42.712002 5.08 l
45.532001 5.08 l
43.792 7.18 l
43.792 20 l
41.652 20 l
41.652 9.74 l
h
72.064003 15.46 m
72.064003 16.433334 71.770668 17.299999 71.184006 18.059999 c
70.610672 18.779999 69.820671 19.34 68.814003 19.74 c
67.807335 20.139999 66.67067 20.34 65.403999 20.34 c
64.243996 20.34 63.117332 20.07 62.023998 19.530001 c
60.930664 18.990002 60.010666 18.240002 59.264 17.280001 c
60.824001 15.820001 l
62.117332 17.380001 63.644001 18.16 65.403999 18.16 c
66.177338 18.16 66.884003 18.066666 67.524002 17.879999 c
68.230667 17.666666 68.777336 17.366667 69.164001 16.98 c
69.604004 16.553333 69.824005 16.046667 69.824005 15.459999 c
69.824005 14.753333 69.604004 14.219999 69.164001 13.859999 c
68.790672 13.553332 68.237335 13.353332 67.503998 13.259998 c
67.077332 13.206665 66.377335 13.179998 65.403999 13.179998 c
63.617332 13.179998 62.253998 12.853332 61.313999 12.199999 c
60.374001 11.546666 59.903999 10.586666 59.903999 9.319999 c
59.903999 8.519999 60.140667 7.759999 60.613998 7.039999 c
61.08733 6.319999 61.737331 5.746666 62.563999 5.319999 c
63.417332 4.866665 64.363998 4.639999 65.403999 4.639999 c
66.577332 4.639999 67.637337 4.819999 68.584 5.179999 c
69.597328 5.566666 70.537331 6.173332 71.403999 6.999999 c
70.043999 8.599999 l
69.230667 7.946666 68.490662 7.489999 67.823997 7.23 c
67.157333 6.97 66.350662 6.84 65.403999 6.84 c
64.85733 6.84 64.347336 6.953333 63.874001 7.18 c
63.400669 7.406667 63.024002 7.71 62.743999 8.09 c
62.463997 8.47 62.323997 8.873333 62.324001 9.3 c
62.324001 10.446667 63.383999 11.020001 65.503998 11.020001 c
67.197334 11.020001 68.537331 11.193334 69.523994 11.540001 c
70.457329 11.873334 71.123993 12.380001 71.523994 13.060001 c
71.883995 13.660001 72.063995 14.460001 72.063995 15.460001 c
72.064003 15.46 l
h
120.767998 5.08 m
123.068001 5.08 l
118.307999 20 l
115.947998 20 l
113.068001 11.18 l
110.267998 20 l
107.907997 20 l
102.848 5.08 l
105.087997 5.08 l
109.047997 16.24 l
111.848 7.44 l
111.087997 5.079999 l
113.327995 5.079999 l
117.087997 16.24 l
120.767998 5.08 l
h
139.940002 20 m
137.800003 20 l
137.800003 5.08 l
139.940002 5.08 l
139.940002 20 l
h
158.352005 7.26 m
158.352005 12.22 l
158.765335 11.980001 159.225342 11.820001 159.73201 11.74 c
160.105347 11.673333 160.585342 11.639999 161.172012 11.639999 c
164.012009 11.639999 l
164.798676 11.639999 165.412003 11.459999 165.852005 11.099999 c
166.318665 10.713333 166.552002 10.133333 166.552002 9.36 c
166.552002 8.626666 166.305328 8.079999 165.811996 7.719999 c
165.38533 7.413333 164.785324 7.259999 164.011993 7.259999 c
158.35199 7.259999 l
158.352005 7.26 l
h
164.731995 17.639999 m
162.911987 13.82 l
161.171982 13.82 l
160.625305 13.82 160.145309 13.853334 159.731979 13.92 c
159.225311 14.013333 158.76532 14.173333 158.351974 14.4 c
158.351974 20 l
156.171982 20 l
156.171982 5.08 l
164.011978 5.08 l
164.931976 5.08 165.745316 5.253333 166.451981 5.6 c
167.158646 5.946667 167.705307 6.44 168.09198 7.08 c
168.50531 7.76 168.71198 8.56 168.71198 9.48 c
168.71198 10.599999 168.41197 11.52 167.81198 12.24 c
167.21199 12.96 166.365326 13.46 165.271988 13.74 c
166.431992 16.119999 l
166.76532 16.613333 167.02533 16.959999 167.21199 17.16 c
167.43866 17.413332 167.655319 17.583332 167.86198 17.67 c
168.06865 17.756668 168.33865 17.800001 168.67198 17.799999 c
168.89198 17.799999 l
169.37198 17.779999 l
169.37198 19.999998 l
168.59865 19.999998 168.02531 19.973331 167.651978 19.919998 c
167.025314 19.813332 166.491974 19.606665 166.051971 19.299997 c
165.531967 18.926664 165.091965 18.373331 164.731964 17.639997 c
164.731995 17.639999 l
h
186.98399 14.020001 m
186.98399 17.82 l
196.18399 17.82 l
196.18399 20 l
184.80399 20 l
184.80399 5.08 l
195.30399 5.08 l
195.30399 7.28 l
186.98398 7.28 l
186.98398 11.799999 l
187.39731 11.56 187.85732 11.4 188.36398 11.32 c
188.73732 11.253333 189.21732 11.219999 189.80399 11.219999 c
193.06398 11.219999 l
193.06398 13.44 l
189.80399 13.44 l
189.25731 13.44 188.77731 13.473333 188.36398 13.54 c
187.85732 13.633333 187.39732 13.793334 186.98398 14.020001 c
186.98399 14.020001 l
h
221.976 20 m
211.51599 20 l
211.51599 5.08 l
213.69598 5.08 l
213.69598 17.82 l
221.97598 17.82 l
221.97598 20 l
221.976 20 l
h
238.588 14.020001 m
238.588 17.82 l
247.78799 17.82 l
247.78799 20 l
236.40799 20 l
236.40799 5.08 l
246.90799 5.08 l
246.90799 7.28 l
238.58798 7.28 l
238.58798 11.799999 l
239.00131 11.56 239.46132 11.4 239.96799 11.32 c
240.34132 11.253333 240.82132 11.219999 241.40799 11.219999 c
244.66798 11.219999 l
244.66798 13.44 l
241.40799 13.44 l
240.86131 13.44 240.38132 13.473333 239.96799 13.54 c
239.46132 13.633333 239.00133 13.793334 238.58798 14.020001 c
238.588 14.020001 l
h
274.72 15.46 m
274.72 16.433334 274.42667 17.299999 273.84 18.059999 c
273.26666 18.779999 272.47668 19.34 271.47 19.74 c
270.46332 20.139999 269.32666 20.34 268.06 20.34 c
266.89999 20.34 265.77335 20.07 264.67999 19.530001 c
263.58664 18.990002 262.66666 18.240002 261.91998 17.280001 c
263.47998 15.820001 l
264.77332 17.380001 266.29999 18.16 268.05997 18.16 c
268.83331 18.16 269.53998 18.066666 270.17996 17.879999 c
270.88663 17.666666 271.43329 17.366667 271.81998 16.98 c
272.25998 16.553333 272.47998 16.046667 272.47998 15.459999 c
272.47998 14.753333 272.25998 14.219999 271.81998 13.859999 c
271.44666 13.553332 270.89331 13.353332 270.15997 13.259998 c
269.73331 13.206665 269.03329 13.179998 268.05997 13.179998 c
266.27332 13.179998 264.90997 12.853332 263.96997 12.199999 c
263.02997 11.546666 262.55997 10.586666 262.55997 9.319999 c
262.55997 8.519999 262.79663 7.759999 263.26996 7.039999 c
263.74329 6.319999 264.39328 5.746666 265.21997 5.319999 c
266.0733 4.866665 267.01996 4.639999 268.05997 4.639999 c
269.23331 4.639999 270.2933 4.819999 271.23996 5.179999 c
272.2533 5.566666 273.1933 6.173332 274.05997 6.999999 c
272.69998 8.599999 l
271.88666 7.946666 271.14664 7.489999 270.47998 7.23 c
269.81332 6.97 269.00665 6.84 268.05997 6.84 c
267.51331 6.84 267.0033 6.953333 266.52997 7.18 c
266.05664 7.406667 265.67996 7.71 265.39996 8.09 c
265.11996 8.47 264.97995 8.873333 264.97995 9.3 c
264.97995 10.446667 266.03995 11.020001 268.15994 11.020001 c
269.85327 11.020001 271.19327 11.193334 272.17993 11.540001 c
273.11325 11.873334 273.77994 12.380001 274.17993 13.060001 c
274.53995 13.660001 274.71994 14.460001 274.71994 15.460001 c
274.72 15.46 l
h
301.35199 15.46 m
301.35199 16.433334 301.05865 17.299999 300.47198 18.059999 c
299.89865 18.779999 299.10867 19.34 298.10199 19.74 c
297.09531 20.139999 295.95865 20.34 294.69199 20.34 c
293.53198 20.34 292.40533 20.07 291.31198 19.530001 c
290.21863 18.990002 289.29865 18.240002 288.55197 17.280001 c
290.11197 15.820001 l
291.4053 17.380001 292.93198 18.16 294.69196 18.16 c
295.4653 18.16 296.17197 18.066666 296.81195 17.879999 c
297.51862 17.666666 298.06528 17.366667 298.45197 16.98 c
298.89197 16.553333 299.11197 16.046667 299.11197 15.459999 c
299.11197 14.753333 298.89197 14.219999 298.45197 13.859999 c
298.07864 13.553332 297.5253 13.353332 296.79196 13.259998 c
296.3653 13.206665 295.66528 13.179998 294.69196 13.179998 c
292.9053 13.179998 291.54196 12.853332 290.60196 12.199999 c
289.66196 11.546666 289.19196 10.586666 289.19196 9.319999 c
289.19196 8.519999 289.42862 7.759999 289.90195 7.039999 c
290.37527 6.319999 291.02527 5.746666 291.85196 5.319999 c
292.70529 4.866665 293.65195 4.639999 294.69196 4.639999 c
295.8653 4.639999 296.92529 4.819999 297.87195 5.179999 c
298.88528 5.566666 299.82529 6.173332 300.69196 6.999999 c
299.33197 8.599999 l
298.51865 7.946666 297.77863 7.489999 297.11197 7.23 c
296.44531 6.97 295.63864 6.84 294.69196 6.84 c
294.14529 6.84 293.63528 6.953333 293.16196 7.18 c
292.68863 7.406667 292.31195 7.71 292.03195 8.09 c
291.75195 8.47 291.61194 8.873333 291.61194 9.3 c
291.61194 10.446667 292.67194 11.020001 294.79193 11.020001 c
296.48526 11.020001 297.82526 11.193334 298.81192 11.540001 c
299.74524 11.873334 300.41193 12.380001 300.81192 13.060001 c
301.17194 13.660001 301.35193 14.460001 301.35193 15.460001 c
301.35199 15.46 l
h
W
[299.151991 0 0 15.700001 2.2 4.640007] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin -0.000001 def
/xMax 1 def
/yMax 0.999999 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 1 mul 0 add
1 index 1 exp -0.867 mul 0.867 add
2 index 1 exp -0.169 mul 1 add
4 3 roll pop 
}
def
-0 1 0 axialSH
Q
Q
q
[60.081703 0 0 60.075977 3255.3381 699.27313] cm
/DeviceRGB {} CS
[0.1333 0.5059 0.9608] SC
/DeviceRGB {} cs
[0.1333 0.5059 0.9608] sc
11.74 13.78 m
3.8 13.78 3.679999 13.759999 3.58 13.759999 c
3.54 13.759999 l
1.54 13.599999 0 11.9 0 9.879999 c
0 7.719999 1.74 5.979999 3.9 5.979999 c
12.299999 5.979999 l
13.98 5.979999 15.339999 7.339999 15.339999 9.039999 c
15.339999 10.659999 l
3.959999 10.659999 l
3.939999 10.659999 l
3.919999 10.659999 l
3.459999 10.639998 3.159999 10.299999 3.159999 9.879999 c
3.159999 9.459999 3.479999 9.119999 3.899999 9.099999 c
13.779999 9.099999 l
13.779999 9.06 l
13.779999 8.2 13.119999 7.54 12.259998 7.54 c
3.899999 7.54 l
2.619999 7.54 1.559999 8.58 1.559999 9.879999 c
1.559999 11.079999 2.459999 12.039999 3.599999 12.199999 c
11.579999 12.199999 11.659999 12.219999 11.799998 12.219999 c
13.799998 12.379999 15.339998 14.099999 15.339998 16.099999 c
15.339998 18.259998 13.599999 19.999998 11.459998 19.999998 c
3.039998 19.999998 l
1.359998 19.999998 -0.000002 18.639997 -0.000002 16.959999 c
-0.000002 15.319999 l
11.459998 15.319999 l
12.439999 15.379999 12.439999 16.82 11.459998 16.879999 c
1.559999 16.879999 l
1.559999 16.92 l
1.559999 17.780001 2.219999 18.440001 3.079999 18.440001 c
11.459999 18.440001 l
12.719999 18.440001 13.799999 17.440001 13.799999 16.1 c
13.799999 14.900001 12.9 13.940001 11.74 13.780001 c
11.74 13.78 l
h
19.700001 7.54 m
19.700001 15.32 l
33.52 15.32 l
33.52 20 l
18.139999 20 l
18.139999 18.440001 l
31.98 18.440001 l
31.98 16.880001 l
18.139999 16.880001 l
18.139999 5.980001 l
22.82 5.980001 l
22.82 13.780002 l
21.26 13.780002 l
21.26 7.540002 l
19.700001 7.540002 l
19.700001 7.54 l
h
41 20 m
36.32 20 l
36.32 5.98 l
41 5.98 l
41 16.879999 l
39.439999 16.879999 l
39.439999 7.539999 l
37.879997 7.539999 l
37.879997 18.439999 l
40.999996 18.439999 l
40.999996 19.999998 l
41 20 l
h
53.240002 13.92 m
57.720001 5.98 l
62.68 5.98 l
62.68 20 l
58 20 l
58 14.76 l
55.02 20 l
51.440002 20 l
46.900002 12.04 l
46.900002 9.1 l
52.360001 18.440001 l
54.119999 18.440001 l
59.559998 9.1 l
59.559998 18.440001 l
61.119999 18.440001 l
61.119999 7.540001 l
58.619999 7.540001 l
53.199997 16.900002 l
47.859997 7.540002 l
45.359997 7.540002 l
45.359997 18.440002 l
46.899998 18.440002 l
46.899998 15.500002 l
48.459999 18.180002 l
48.459999 20.000002 l
43.799999 20.000002 l
43.799999 5.980001 l
48.759998 5.980001 l
53.240002 13.92 l
h
f
Q
q
[48.916702 0 0 48.912045 7408.8521 911.79132] cm
q
13.98 5.88 m
10.679999 5.88 l
10.679999 20 l
7.119999 20 l
7.119999 5.88 l
3.82 5.88 l
3.82 3.24 l
13.98 3.24 l
13.98 5.88 l
h
10.28 19.6 m
10.28 5.480001 l
13.58 5.480001 l
13.58 3.64 l
4.22 3.64 l
4.22 5.480001 l
7.52 5.480001 l
7.52 19.6 l
10.280001 19.6 l
10.28 19.6 l
h
18.700001 12.54 m
18.700001 17.360001 l
23.220001 17.360001 l
23.220001 20 l
15.140001 20 l
15.140001 3.24 l
23.220001 3.24 l
23.220001 5.88 l
18.700001 5.86 l
18.700001 9.940001 l
21.540001 9.940001 l
21.540001 12.540001 l
18.700001 12.540001 l
18.700001 12.54 l
h
21.139999 12.14 m
21.139999 10.34 l
18.299999 10.34 l
18.299999 5.46 l
22.82 5.48 l
22.82 3.64 l
15.539999 3.64 l
15.539999 19.6 l
22.82 19.6 l
22.82 17.76 l
18.299999 17.76 l
18.299999 12.14 l
21.139999 12.14 l
h
33.84 14.22 m
33.84 16.4 l
33.860001 18.360001 32.299999 20.219999 30.280001 20.219999 c
30.18 20.199999 30.120001 20.199999 30.040001 20.199999 c
29.200001 20.199999 l
28.960001 20.199999 28.720001 20.199999 28.480001 20.219999 c
28.180002 20.219999 l
26.160002 20.219999 24.600002 18.439999 24.600002 16.459999 c
24.600002 6.759999 l
24.600002 4.799999 26.180002 2.999999 28.180002 2.999999 c
28.580002 3.019999 28.980001 3.019999 29.360003 3.019999 c
30.260002 3.019999 l
32.280003 3.019999 33.860001 4.799999 33.840004 6.779999 c
33.840004 9.4 l
30.240004 9.4 l
30.240004 7.92 l
30.280005 5.98 30.160004 5.9 28.920004 5.9 c
28.440004 5.9 28.140003 5.98 28.140003 6.599999 c
28.140003 16.619999 l
28.140003 17.299999 28.700003 17.32 29.200003 17.32 c
30.120003 17.279999 30.240002 16.16 30.240002 14.84 c
30.240002 14.22 l
33.84 14.22 l
h
30.639999 7.42 m
30.639999 9 l
33.439999 9 l
33.439999 6.78 l
33.439999 5.04 32.079998 3.42 30.279999 3.42 c
29.779999 3.42 l
29.239998 3.42 28.719999 3.4 28.179998 3.4 c
26.439999 3.4 24.999998 5 24.999998 6.76 c
24.999998 16.459999 l
24.999998 18.24 26.419998 19.82 28.179998 19.82 c
28.599998 19.82 29.059998 19.84 29.499998 19.84 c
29.599998 19.84 l
29.979998 19.84 30.379999 19.84 30.739998 19.780001 c
32.299999 19.540001 33.439999 18 33.439999 16.400001 c
33.439999 14.620002 l
30.639999 14.620002 l
30.639999 15.100002 l
30.639999 16.200003 30.519999 17.740002 29.039999 17.740002 c
28.539999 17.740002 27.74 17.540001 27.74 16.620001 c
27.74 6.6 l
27.74 5.66 28.34 5.500001 28.92 5.500001 c
30.52 5.500001 30.639999 6.04 30.639999 7.420001 c
30.639999 7.42 l
h
42 20 m
42 12.88 l
38.919998 12.88 l
38.919998 20 l
35.379997 20 l
35.379997 3.24 l
38.919998 3.24 l
38.919998 10.139999 l
42 10.139999 l
42 3.239999 l
45.599998 3.239999 l
45.599998 20 l
42 20 l
h
42.400002 12.48 m
42.400002 19.599998 l
45.200001 19.599998 l
45.200001 3.639998 l
42.400002 3.639998 l
42.400002 10.539999 l
38.52 10.539999 l
38.52 3.639999 l
35.779999 3.639999 l
35.779999 19.599998 l
38.52 19.599998 l
38.52 12.479999 l
42.400002 12.479999 l
42.400002 12.48 l
h
W
[41.78 0 0 17.22 3.820003 2.999999] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin 0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 1 mul 0 add
1 index 1 exp -0.867 mul 0.867 add
2 index 1 exp -0.169 mul 1 add
4 3 roll pop 
}
def
-0 1 0 axialSH
Q
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
